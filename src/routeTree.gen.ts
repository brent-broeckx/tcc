/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedAdminRouteImport } from './routes/_authed/_admin'
import { Route as AuthedPollsIndexRouteImport } from './routes/_authed/polls/index'
import { Route as AuthedPollsPollIdRouteImport } from './routes/_authed/polls/$pollId'
import { Route as AuthedAdminDashboardRouteImport } from './routes/_authed/_admin/dashboard'

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedAdminRoute = AuthedAdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPollsIndexRoute = AuthedPollsIndexRouteImport.update({
  id: '/polls/',
  path: '/polls/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPollsPollIdRoute = AuthedPollsPollIdRouteImport.update({
  id: '/polls/$pollId',
  path: '/polls/$pollId',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAdminDashboardRoute = AuthedAdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedAdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedAdminRouteWithChildren
  '/dashboard': typeof AuthedAdminDashboardRoute
  '/polls/$pollId': typeof AuthedPollsPollIdRoute
  '/polls': typeof AuthedPollsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedAdminRouteWithChildren
  '/dashboard': typeof AuthedAdminDashboardRoute
  '/polls/$pollId': typeof AuthedPollsPollIdRoute
  '/polls': typeof AuthedPollsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/_admin': typeof AuthedAdminRouteWithChildren
  '/_authed/_admin/dashboard': typeof AuthedAdminDashboardRoute
  '/_authed/polls/$pollId': typeof AuthedPollsPollIdRoute
  '/_authed/polls/': typeof AuthedPollsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/dashboard' | '/polls/$pollId' | '/polls'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/dashboard' | '/polls/$pollId' | '/polls'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/_admin'
    | '/_authed/_admin/dashboard'
    | '/_authed/polls/$pollId'
    | '/_authed/polls/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/_admin': {
      id: '/_authed/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedAdminRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/_admin/dashboard': {
      id: '/_authed/_admin/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedAdminDashboardRouteImport
      parentRoute: typeof AuthedAdminRoute
    }
    '/_authed/polls/$pollId': {
      id: '/_authed/polls/$pollId'
      path: '/polls/$pollId'
      fullPath: '/polls/$pollId'
      preLoaderRoute: typeof AuthedPollsPollIdRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/polls/': {
      id: '/_authed/polls/'
      path: '/polls'
      fullPath: '/polls'
      preLoaderRoute: typeof AuthedPollsIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedAdminRouteChildren {
  AuthedAdminDashboardRoute: typeof AuthedAdminDashboardRoute
}

const AuthedAdminRouteChildren: AuthedAdminRouteChildren = {
  AuthedAdminDashboardRoute: AuthedAdminDashboardRoute,
}

const AuthedAdminRouteWithChildren = AuthedAdminRoute._addFileChildren(
  AuthedAdminRouteChildren,
)

interface AuthedRouteChildren {
  AuthedAdminRoute: typeof AuthedAdminRouteWithChildren
  AuthedPollsPollIdRoute: typeof AuthedPollsPollIdRoute
  AuthedPollsIndexRoute: typeof AuthedPollsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedAdminRoute: AuthedAdminRouteWithChildren,
  AuthedPollsPollIdRoute: AuthedPollsPollIdRoute,
  AuthedPollsIndexRoute: AuthedPollsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
